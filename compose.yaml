services:
  rest-server:
    image: restic/rest-server:0.14.0
    restart: always
    environment:
      - TZ=Europe/Berlin
      # - DISABLE_AUTHENTICATION=true
      - PASSWORD_FILE=/.htpasswd
      - |
        OPTIONS=
          --private-repos
      #     --log /logs/rest-server.log
      #     --tls
      #     --tls-cert=/certs/local.crt
      #     --tls-key=/certs/local.key
      #     --debug
    # ports:
    #   - "8000:8000"
    volumes:
      - ${RESTIC_DIR}/data:/data
      - ${RESTIC_DIR}/.htpasswd:/.htpasswd
      # - ./logs:/logs
      # - ./certs:/certs:ro
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rest-server.rule=Host(`${HOSTNAME}`) && PathPrefix(`/rest-server`)"
      - "traefik.http.routers.rest-server.middlewares=rest-server-regex,secure-headers"

  traefik:
    image: traefik:v3.5.2
    restart: always
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    environment:
      - TZ=Europe/Berlin
    command:
      # API & Dashboard
      - "--api.insecure=false"
      - "--api.dashboard=true"
      
      # Observability
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--accesslog.filePath=/logs/traefik-access.log"
      # - "--metrics.prometheus=true"

      # Providers
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"

      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      # ensure HTTPS is used by default by every service
      - "--entrypoints.websecure.asDefault=true"
      
      # Attach dynamic configuration settings (e.g. TLS configuration)
      - "--providers.file.directory=/dynamic"

    ports:
      - 80:80
      - 443:443

    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # Self-signed SSL certificates
      - "./certs:/certs:ro"
      - "./dynamic:/dynamic:ro"
      - "./logs:/logs"

    labels:
      # Enable self-routing
      - "traefik.enable=true"

      # Dashboard router
      - "traefik.http.routers.dashboard.rule=Host(`${HOSTNAME}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth,secure-headers"

      # Middleware for rest-server
      - "traefik.http.middlewares.rest-server-regex.replacepathregex.regex=^/rest-server/(.*)"
      - "traefik.http.middlewares.rest-server-regex.replacepathregex.replacement=/$$1"

      # Middleware for nextcloud
      - "traefik.http.middlewares.nextcloud-stripprefix.stripprefix.prefixes=/nextcloud"
      - "traefik.http.middlewares.nextcloud-redirect-dav.redirectregex.permanent=true"
      - "traefik.http.middlewares.nextcloud-redirect-dav.redirectregex.regex=https://(.*)/.well-known/(?:card|cal)dav"
      - "traefik.http.middlewares.nextcloud-redirect-dav.redirectregex.replacement=https://$${1}/nextcloud/remote.php/dav"
      - "traefik.http.middlewares.nextcloud-headers.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.http.middlewares.nextcloud.chain.middlewares=nextcloud-headers,secure-headers,nextcloud-stripprefix,nextcloud-redirect-dav"

      # Middleware for dashboard
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${AUTH_USERS}"

      # Secure Headers Middleware
      - "traefik.http.middlewares.secure-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.secure-headers.headers.sslRedirect=true"
      - "traefik.http.middlewares.secure-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.secure-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.secure-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.secure-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.secure-headers.headers.stsSeconds=31536000"

  whoami:
    image: "traefik/whoami"
    restart: always
    networks:
      - proxy
    environment:
      - TZ=Europe/Berlin
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`${HOSTNAME}`) && PathPrefix(`/whoami`)"
      - "traefik.http.routers.whoami.middlewares=secure-headers"

  postgres:
    image: postgres:alpine
    restart: always
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - nextcloud
    environment:
      - TZ=Europe/Berlin
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  redis:
    image: redis:alpine
    restart: always
    networks:
      - nextcloud
    environment:
      - TZ=Europe/Berlin

  nextcloud:
    image: nextcloud:31.0.9
    restart: always
    networks:
      - proxy
      - nextcloud
    environment:
      - TZ=Europe/Berlin
      - OVERWRITEHOST=${HOSTNAME}
      - OVERWRITEPROTOCOL=https
      - OVERWRITECLIURL=https://${HOSTNAME}/nextcloud
      - OVERWRITEWEBROOT=/nextcloud
      - NEXTCLOUD_TRUSTED_DOMAINS=${HOSTNAME}
      - TRUSTED_PROXIES=${SUBNET}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
    volumes:
      - nextcloud:/var/www/html
      - /mnt/restic/flo/snapshots/latest/home/flo/Pictures:/mnt/flo/Pictures:ro
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`${HOSTNAME}`) && PathPrefix(`/nextcloud`)"
      - "traefik.http.routers.nextcloud.middlewares=nextcloud"

networks:
  proxy:
    name: proxy
    driver: bridge
    ipam:
      config:
        # Specifying the subnet makes it possible to define the IP range for Nextclouds "Trusted Proxies", if ever needed
        - subnet: ${SUBNET}
  nextcloud:
    name: nextcloud

volumes:
  postgres:
  nextcloud: