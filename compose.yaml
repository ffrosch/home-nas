services:
  rest-server:
    image: restic/rest-server:0.14.0
    restart: always
    environment:
      - TZ=Europe/Berlin
      # - DISABLE_AUTHENTICATION=true
      - PASSWORD_FILE=/.htpasswd
      - |
        OPTIONS=
          --private-repos
      #     --log /logs/rest-server.log
      #     --tls
      #     --tls-cert=/certs/local.crt
      #     --tls-key=/certs/local.key
      #     --debug
    # ports:
    #   - "8000:8000"
    volumes:
      - ${RESTIC_DIR}/data:/data
      - ${RESTIC_DIR}/.htpasswd:/.htpasswd
      # - ./logs:/logs
      # - ./certs:/certs:ro
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rest-server.rule=Host(`${HOSTNAME}`) && PathPrefix(`/rest-server`)"
      - "traefik.http.routers.rest-server.middlewares=rest-server-regex,secure-headers"

  traefik:
    image: traefik:v3.5.2
    restart: always
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    environment:
      - TZ=Europe/Berlin
    command:
      # API & Dashboard
      - "--api.insecure=false"
      - "--api.dashboard=true"
      
      # Observability
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--accesslog.filePath=/logs/traefik-access.log"
      # - "--metrics.prometheus=true"

      # Providers
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"

      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      # ensure HTTPS is used by default by every service
      - "--entrypoints.websecure.asDefault=true"
      
      # Attach dynamic configuration settings (e.g. TLS configuration)
      - "--providers.file.directory=/dynamic"

    ports:
      - 80:80
      - 443:443

    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # Self-signed SSL certificates
      - "./certs:/certs:ro"
      - "./dynamic:/dynamic:ro"
      - "./logs:/logs"

    labels:
      # Enable self-routing
      - "traefik.enable=true"

      # Redirect short hostname to full hostname
      - "traefik.http.routers.short-hostname-redirect.rule=Host(`${HOSTNAME_SHORT}`)"
      - "traefik.http.routers.short-hostname-redirect.middlewares=short-hostname-redirect-regex"
      - "traefik.http.middlewares.short-hostname-redirect-regex.redirectregex.permanent=true"
      - "traefik.http.middlewares.short-hostname-redirect-regex.redirectregex.regex=^https://[^/]+/(.*)"
      - "traefik.http.middlewares.short-hostname-redirect-regex.redirectregex.replacement=https://${HOSTNAME}/$${1}"

      # Dashboard router
      - "traefik.http.routers.dashboard.rule=Host(`${HOSTNAME}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth,secure-headers"

      # Middleware for rest-server
      - "traefik.http.middlewares.rest-server-regex.replacepathregex.regex=^/rest-server/(.*)"
      - "traefik.http.middlewares.rest-server-regex.replacepathregex.replacement=/$$1"

      # Middleware for nextcloud
      - "traefik.http.middlewares.nextcloud-stripprefix.stripprefix.prefixes=/nextcloud"
      - "traefik.http.middlewares.nextcloud-redirect-dav.redirectregex.permanent=true"
      - "traefik.http.middlewares.nextcloud-redirect-dav.redirectregex.regex=https://(.*)/.well-known/(?:card|cal)dav"
      - "traefik.http.middlewares.nextcloud-redirect-dav.redirectregex.replacement=https://$${1}/nextcloud/remote.php/dav"
      - "traefik.http.middlewares.nextcloud-headers.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.http.middlewares.nextcloud.chain.middlewares=nextcloud-headers,secure-headers,nextcloud-stripprefix,nextcloud-redirect-dav"

      # Middleware for dashboard
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${AUTH_USERS}"

      # Secure Headers Middleware
      - "traefik.http.middlewares.secure-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.secure-headers.headers.sslRedirect=true"
      - "traefik.http.middlewares.secure-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.secure-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.secure-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.secure-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.secure-headers.headers.stsSeconds=31536000"

  whoami:
    image: "traefik/whoami"
    restart: always
    networks:
      - proxy
    environment:
      - TZ=Europe/Berlin
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`${HOSTNAME}`) && PathPrefix(`/whoami`)"
      - "traefik.http.routers.whoami.middlewares=secure-headers"

  postgres:
    image: postgres:alpine
    restart: always
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - nextcloud
    environment:
      - TZ=Europe/Berlin
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  redis:
    image: redis:alpine
    restart: always
    networks:
      - nextcloud
    environment:
      - TZ=Europe/Berlin

  nextcloud:
    image: nextcloud:31.0.9
    restart: always
    networks:
      - proxy
      - nextcloud
    environment:
      - TZ=Europe/Berlin
      - OVERWRITEHOST=${HOSTNAME}
      - OVERWRITEPROTOCOL=https
      - OVERWRITECLIURL=https://${HOSTNAME}/nextcloud
      - OVERWRITEWEBROOT=/nextcloud
      - NEXTCLOUD_TRUSTED_DOMAINS=${HOSTNAME}
      - TRUSTED_PROXIES=${SUBNET}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
    volumes:
      - nextcloud:/var/www/html
      - ${FLO_PICTURE_FOLDER}:/mnt/flo/Pictures:ro
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`${HOSTNAME}`) && PathPrefix(`/nextcloud`)"
      - "traefik.http.routers.nextcloud.middlewares=nextcloud"

  photoprism-flo:
    image: photoprism/photoprism:latest
    restart: always
    stop_grace_period: 15s
    depends_on:
      - mariadb-flo
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    networks:
      - proxy
      - photoprism-flo
    ## Before you start the service, please check the following config options (and change them as needed):
    ## https://docs.photoprism.app/getting-started/config-options/
    environment:
      TZ: Europe/Berlin
      PHOTOPRISM_ADMIN_USER: ${PHOTOPRISM_FLO_USER}                 # admin login username
      PHOTOPRISM_ADMIN_PASSWORD: ${PHOTOPRISM_FLO_PASSWORD}          # initial admin password (8-72 characters)
      PHOTOPRISM_AUTH_MODE: "password"               # authentication mode (public, password)
      PHOTOPRISM_DISABLE_TLS: "true"                # disables HTTPS/TLS even if the site URL starts with https:// and a certificate is available
      PHOTOPRISM_DEFAULT_TLS: "false"                 # defaults to a self-signed HTTPS/TLS certificate if no other certificate is available
      PHOTOPRISM_DEFAULT_LOCALE: "en"                # default user interface language, e.g. "en" or "de"
      PHOTOPRISM_PLACES_LOCALE: "local"              # location details language, e.g. "local", "en", or "de"
      PHOTOPRISM_SITE_URL: "https://${HOSTNAME}/photoprism/flo"  # server URL in the format "http(s)://domain.name(:port)/(path)"
      PHOTOPRISM_SITE_TITLE: "PhotoPrism"
      PHOTOPRISM_SITE_CAPTION: "AI-Powered Photos App"
      PHOTOPRISM_SITE_DESCRIPTION: ""                # meta site description
      PHOTOPRISM_SITE_AUTHOR: ""                     # meta site author
      PHOTOPRISM_LOG_LEVEL: "info"                   # log level: trace, debug, info, warning, or error
      PHOTOPRISM_READONLY: "true"                   # do not modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "true"               # enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "false"              # disables updating storage permissions via chmod and chown on startup
      PHOTOPRISM_DISABLE_WEBDAV: "true"             # disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false"           # disables settings UI and API
      PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # disables all features depending on TensorFlow
      PHOTOPRISM_DISABLE_FACES: "false"              # disables face detection and recognition (requires TensorFlow)
      PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # disables image classification (requires TensorFlow)
      PHOTOPRISM_DISABLE_VECTORS: "false"            # disables vector graphics support
      PHOTOPRISM_DISABLE_RAW: "true"                # disables indexing and conversion of RAW images
      PHOTOPRISM_RAW_PRESETS: "false"                # enables applying user presets when converting RAW images (reduces performance)
      PHOTOPRISM_SIDECAR_YAML: "true"                # creates YAML sidecar files to back up picture metadata
      PHOTOPRISM_BACKUP_ALBUMS: "true"               # creates YAML files to back up album metadata
      PHOTOPRISM_BACKUP_DATABASE: "true"             # creates regular backups based on the configured schedule
      PHOTOPRISM_BACKUP_SCHEDULE: "daily"            # backup SCHEDULE in cron format (e.g. "0 12 * * *" for daily at noon) or at a random time (daily, weekly)
      PHOTOPRISM_INDEX_SCHEDULE: "daily"                  # indexing SCHEDULE in cron format (e.g. "@every 3h" for every 3 hours; "" to disable)
      PHOTOPRISM_AUTO_INDEX: 300                     # delay before automatically indexing files in SECONDS when uploading via WebDAV (-1 to disable)
      PHOTOPRISM_AUTO_IMPORT: -1                     # delay before automatically importing files in SECONDS when uploading via WebDAV (-1 to disable)
      PHOTOPRISM_DETECT_NSFW: "false"                # automatically flags photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # allows uploads that MAY be offensive (no effect without TensorFlow)
      PHOTOPRISM_UPLOAD_ALLOW: ""                    # restricts uploads to these file types (comma-separated list of EXTENSIONS; leave blank to allow all)
      PHOTOPRISM_UPLOAD_ARCHIVES: "true"             # allows upload of zip archives (will be extracted before import)
      PHOTOPRISM_UPLOAD_LIMIT: 5000                  # maximum size of uploaded files and uncompressed archive contents in MB
      PHOTOPRISM_ORIGINALS_LIMIT: 5000               # maximum size of original media files in MB (larger files are skipped)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
      # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that does not require a separate database server
      PHOTOPRISM_DATABASE_DRIVER: "mysql"            # MariaDB 10.5.12+ (MySQL successor) offers significantly better performance compared to SQLite
      PHOTOPRISM_DATABASE_SERVER: "mariadb-flo:3306"     # MariaDB database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "${PHOTOPRISM_DATABASE_NAME}"         # MariaDB database, see MARIADB_DATABASE in the mariadb service
      PHOTOPRISM_DATABASE_USER: "${PHOTOPRISM_DATABASE_USER}"         # MariaDB database username, must be the same as MARIADB_USER
      PHOTOPRISM_DATABASE_PASSWORD: "${PHOTOPRISM_DATABASE_PASSWORD}"       # MariaDB database password, must be the same as MARIADB_PASSWORD
      ## Run/install on first startup (https://docs.photoprism.app/getting-started/config-options/#docker-image):
      PHOTOPRISM_INIT: "https tensorflow"            # options: update https tensorflow tensorflow-gpu intel gpu davfs yt-dlp
      ## Run as a non-root user after initialization (supported: 0, 33, 50-99, 500-600, and 900-1200):
      # PHOTOPRISM_UID: 1000
      # PHOTOPRISM_GID: 1000
      # PHOTOPRISM_UMASK: 0000
      PHOTOPRISM_TRUSTED_PROXY: "${SUBNET}"  # comma-separated list of trusted proxies (IP addresses or subnets in CIDR notation)
    ## Start as non-root user before initialization (supported: 0, 33, 50-99, 500-600, and 900-1200):
    # user: "1000:1000"
    working_dir: "/photoprism" # do not change or remove
    volumes:
      - ${FLO_PICTURE_FOLDER}:/photoprism/originals:ro               # Original media files (DO NOT REMOVE)
      # - "/example/family:/photoprism/originals/family" # *Additional* media folders can be mounted like this
      - ./photoprism/storage/flo:/photoprism/storage                  # *Writable* storage folder for cache, database, and sidecar files (DO NOT REMOVE)
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.photoprism-flo.rule=Host(`${HOSTNAME}`) && PathPrefix(`/photoprism/flo`)"
      - "traefik.http.routers.photoprism-flo.middlewares=secure-headers"

  ## MariaDB Database Server (recommended)
  ## see https://docs.photoprism.app/getting-started/faq/#should-i-use-sqlite-mariadb-or-mysql
  mariadb-flo:
    image: mariadb:11
    restart: always
    stop_grace_period: 15s
    security_opt: # see https://github.com/MariaDB/mariadb-docker/issues/434#issuecomment-1136151239
      - seccomp:unconfined
      - apparmor:unconfined
    command: --innodb-buffer-pool-size=512M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    networks:
      - photoprism-flo
    volumes:
      - "./photoprism/database/flo:/var/lib/mysql" # DO NOT REMOVE
    ## See https://link.photoprism.app/mariadb-enviconment-variables:
    environment:
      TZ: Europe/Berlin
      MARIADB_AUTO_UPGRADE: "1"
      MARIADB_INITDB_SKIP_TZINFO: "1"
      MARIADB_DATABASE: "${MARIADB_DATABASE}"
      MARIADB_USER: "${MARIADB_USER}"
      MARIADB_PASSWORD: "${MARIADB_PASSWORD}"
      MARIADB_ROOT_PASSWORD: "${MARIADB_ROOT_PASSWORD}"

  photoprism-maria:
    image: photoprism/photoprism:latest
    restart: always
    stop_grace_period: 15s
    depends_on:
      - mariadb-maria
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    networks:
      - proxy
      - photoprism-maria
    ## Before you start the service, please check the following config options (and change them as needed):
    ## https://docs.photoprism.app/getting-started/config-options/
    environment:
      TZ: Europe/Berlin
      PHOTOPRISM_ADMIN_USER: ${PHOTOPRISM_MARIA_USER}                 # admin login username
      PHOTOPRISM_ADMIN_PASSWORD: ${PHOTOPRISM_MARIA_PASSWORD}          # initial admin password (8-72 characters)
      PHOTOPRISM_AUTH_MODE: "password"               # authentication mode (public, password)
      PHOTOPRISM_DISABLE_TLS: "true"                # disables HTTPS/TLS even if the site URL starts with https:// and a certificate is available
      PHOTOPRISM_DEFAULT_TLS: "false"                 # defaults to a self-signed HTTPS/TLS certificate if no other certificate is available
      PHOTOPRISM_DEFAULT_LOCALE: "en"                # default user interface language, e.g. "en" or "de"
      PHOTOPRISM_PLACES_LOCALE: "local"              # location details language, e.g. "local", "en", or "de"
      PHOTOPRISM_SITE_URL: "https://${HOSTNAME}/photoprism/maria"  # server URL in the format "http(s)://domain.name(:port)/(path)"
      PHOTOPRISM_SITE_TITLE: "PhotoPrism"
      PHOTOPRISM_SITE_CAPTION: "AI-Powered Photos App"
      PHOTOPRISM_SITE_DESCRIPTION: ""                # meta site description
      PHOTOPRISM_SITE_AUTHOR: ""                     # meta site author
      PHOTOPRISM_LOG_LEVEL: "info"                   # log level: trace, debug, info, warning, or error
      PHOTOPRISM_READONLY: "true"                   # do not modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "true"               # enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "false"              # disables updating storage permissions via chmod and chown on startup
      PHOTOPRISM_DISABLE_WEBDAV: "true"             # disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false"           # disables settings UI and API
      PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # disables all features depending on TensorFlow
      PHOTOPRISM_DISABLE_FACES: "false"              # disables face detection and recognition (requires TensorFlow)
      PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # disables image classification (requires TensorFlow)
      PHOTOPRISM_DISABLE_VECTORS: "false"            # disables vector graphics support
      PHOTOPRISM_DISABLE_RAW: "true"                # disables indexing and conversion of RAW images
      PHOTOPRISM_RAW_PRESETS: "false"                # enables applying user presets when converting RAW images (reduces performance)
      PHOTOPRISM_SIDECAR_YAML: "true"                # creates YAML sidecar files to back up picture metadata
      PHOTOPRISM_BACKUP_ALBUMS: "true"               # creates YAML files to back up album metadata
      PHOTOPRISM_BACKUP_DATABASE: "true"             # creates regular backups based on the configured schedule
      PHOTOPRISM_BACKUP_SCHEDULE: "daily"            # backup SCHEDULE in cron format (e.g. "0 12 * * *" for daily at noon) or at a random time (daily, weekly)
      PHOTOPRISM_INDEX_SCHEDULE: "daily"                  # indexing SCHEDULE in cron format (e.g. "@every 3h" for every 3 hours; "" to disable)
      PHOTOPRISM_AUTO_INDEX: 300                     # delay before automatically indexing files in SECONDS when uploading via WebDAV (-1 to disable)
      PHOTOPRISM_AUTO_IMPORT: -1                     # delay before automatically importing files in SECONDS when uploading via WebDAV (-1 to disable)
      PHOTOPRISM_DETECT_NSFW: "false"                # automatically flags photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # allows uploads that MAY be offensive (no effect without TensorFlow)
      PHOTOPRISM_UPLOAD_ALLOW: ""                    # restricts uploads to these file types (comma-separated list of EXTENSIONS; leave blank to allow all)
      PHOTOPRISM_UPLOAD_ARCHIVES: "true"             # allows upload of zip archives (will be extracted before import)
      PHOTOPRISM_UPLOAD_LIMIT: 5000                  # maximum size of uploaded files and uncompressed archive contents in MB
      PHOTOPRISM_ORIGINALS_LIMIT: 5000               # maximum size of original media files in MB (larger files are skipped)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
      # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that does not require a separate database server
      PHOTOPRISM_DATABASE_DRIVER: "mysql"            # MariaDB 10.5.12+ (MySQL successor) offers significantly better performance compared to SQLite
      PHOTOPRISM_DATABASE_SERVER: "mariadb-maria:3306"     # MariaDB database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "${PHOTOPRISM_DATABASE_NAME}"         # MariaDB database, see MARIADB_DATABASE in the mariadb service
      PHOTOPRISM_DATABASE_USER: "${PHOTOPRISM_DATABASE_USER}"         # MariaDB database username, must be the same as MARIADB_USER
      PHOTOPRISM_DATABASE_PASSWORD: "${PHOTOPRISM_DATABASE_PASSWORD}"       # MariaDB database password, must be the same as MARIADB_PASSWORD
      ## Run/install on first startup (https://docs.photoprism.app/getting-started/config-options/#docker-image):
      PHOTOPRISM_INIT: "https tensorflow"            # options: update https tensorflow tensorflow-gpu intel gpu davfs yt-dlp
      ## Run as a non-root user after initialization (supported: 0, 33, 50-99, 500-600, and 900-1200):
      # PHOTOPRISM_UID: 1000
      # PHOTOPRISM_GID: 1000
      # PHOTOPRISM_UMASK: 0000
      PHOTOPRISM_TRUSTED_PROXY: "${SUBNET}"  # comma-separated list of trusted proxies (IP addresses or subnets in CIDR notation)
    ## Start as non-root user before initialization (supported: 0, 33, 50-99, 500-600, and 900-1200):
    # user: "1000:1000"
    working_dir: "/photoprism" # do not change or remove
    volumes:
      - ${MARIA_PICTURE_FOLDER}:/photoprism/originals:ro               # Original media files (DO NOT REMOVE)
      # - "/example/family:/photoprism/originals/family" # *Additional* media folders can be mounted like this
      - ./photoprism/storage/maria:/photoprism/storage                  # *Writable* storage folder for cache, database, and sidecar files (DO NOT REMOVE)
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.photoprism-maria.rule=Host(`${HOSTNAME}`) && PathPrefix(`/photoprism/maria`)"
      - "traefik.http.routers.photoprism-maria.middlewares=secure-headers"

  ## MariaDB Database Server (recommended)
  ## see https://docs.photoprism.app/getting-started/faq/#should-i-use-sqlite-mariadb-or-mysql
  mariadb-maria:
    image: mariadb:11
    restart: always
    stop_grace_period: 15s
    security_opt: # see https://github.com/MariaDB/mariadb-docker/issues/434#issuecomment-1136151239
      - seccomp:unconfined
      - apparmor:unconfined
    command: --innodb-buffer-pool-size=512M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    networks:
      - photoprism-maria
    volumes:
      - "./photoprism/database/maria:/var/lib/mysql" # DO NOT REMOVE
    ## See https://link.photoprism.app/mariadb-enviconment-variables:
    environment:
      TZ: Europe/Berlin
      MARIADB_AUTO_UPGRADE: "1"
      MARIADB_INITDB_SKIP_TZINFO: "1"
      MARIADB_DATABASE: "${MARIADB_DATABASE}"
      MARIADB_USER: "${MARIADB_USER}"
      MARIADB_PASSWORD: "${MARIADB_PASSWORD}"
      MARIADB_ROOT_PASSWORD: "${MARIADB_ROOT_PASSWORD}"

  # ## Watchtower upgrades services (docker containers) automatically (optional)
  # ## see https://docs.photoprism.app/getting-started/updates/#watchtower
  # ## activate via "COMPOSE_PROFILES=update docker compose up -d"
  # watchtower:
  #   image: containrrr/watchtower
  #   restart: unless-stopped
  #   ## Only starts this service if the "update" profile is specified::
  #   ## docker compose --profile update up -d
  #   profiles: ["update"]
  #   environment:
  #     WATCHTOWER_CLEANUP: "true"
  #     WATCHTOWER_POLL_INTERVAL: 7200 # checks for updates every 2 hours
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #     - "~/.docker/config.json:/config.json" # optional, for authentication if you have a Docker Hub account

networks:
  proxy:
    name: proxy
    driver: bridge
    ipam:
      config:
        # Specifying the subnet makes it possible to define the IP range for Nextclouds "Trusted Proxies", if ever needed
        - subnet: ${SUBNET}
  nextcloud:
    name: nextcloud
  photoprism-flo:
    name: photoprism-flo
  photoprism-maria:
    name: photoprism-maria

volumes:
  postgres:
  nextcloud: